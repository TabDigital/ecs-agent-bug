#!/bin/bash -e

function usage {
  echo "Usage: deploy --cluster test --service foo"
  exit 1
}

while [ $# -gt 0 ]; do
  case $1 in
      --cluster) shift; cluster="$1"; shift;;
      --service) shift; service="$1"; shift;;
      *) usage;;
  esac
done

if [ -z "${cluster}" ]; then
  usage
fi

if [ -z "${service}" ]; then
  usage
fi

mkdir -p tmp
echo [${service}] starting deployment...

while true; do

  cat services/${service} | while read image; do

    echo [${service}] deploying ${image}

    # create a new task definition
    echo [${service}] creating task definition
    sed "s|%DOCKER_IMAGE%|${image}|" task-template.json > tmp/task-${service}.json
    aws ecs register-task-definition --family ${service} --cli-input-json file://$(pwd)/tmp/task-${service}.json > tmp/aws-task-${image}.json
    task_arn=$(cat tmp/aws-task-${image}.json | jq -r .taskDefinition.taskDefinitionArn)
    echo [${service}] created task definition ${task_arn}

    # create or update the service
    status=$(aws ecs describe-services --cluster ${cluster} --services ${service} | jq -r .services[0].status)

    if [ "${status}" = "ACTIVE" ]; then
      echo [${service}] updating existing service
      aws ecs update-service --cluster ${cluster} --service ${service} --task-definition ${task_arn} --desired-count 1  > tmp/aws-service-${image}.json
      service_arn=$(cat tmp/aws-service-${image}.json | jq -r .service.serviceArn)
      echo [${service}] updated to use task ${task_arn}
    else
      echo [${service}] creating new service
      aws ecs create-service --cluster ${cluster} --service-name ${service} --task-definition ${task_arn} --desired-count 1  > tmp/aws-service-${image}.json
      service_arn=$(cat tmp/aws-service-${image}.json | jq -r .service.serviceArn)
      echo [${service}] created with task ${task_arn}
    fi

    # wait for the deployment to finish
    echo [${service}] waiting for deployment of ${image} to be stable
    aws ecs wait services-stable --cluster ${cluster} --services ${service}

    echo [${service}] deployment of ${image} is stable

  done

done

echo [${service}] finished
exit
